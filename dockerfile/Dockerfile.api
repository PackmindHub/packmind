FROM node:22.17.1-alpine

ENV NODE_ENV=production

# Update OpenSSL and install required system dependencies
RUN apk update && \
    apk add --no-cache \
        openssl=3.5.4-r0 \
        bash \
        curl \
        wget \
        ca-certificates \
        nano \
        libcurl \
        build-base \
        git \
        python3 \
        py3-pip \
        python3-dev

# Use the existing node user from the base image
USER node

WORKDIR /app

# Copy optimized API package.json and install only required dependencies
COPY --chown=node:node apps/api/*package*.json package.json
RUN npm install --omit=dev --ignore-scripts && npm cache clean --force

# Copy the built application and migrations bundle with correct ownership
COPY --chown=node:node dist/apps/api/main.js ./
COPY --chown=node:node dist/packages/migrations-bundle ./migrations/

# Copy base tree-sitter WASM files to /app/ directory for runtime initialization
COPY --chown=node:node dist/apps/api/tree-sitter*.wasm ./
COPY --chown=node:node dist/apps/api/web-tree-sitter*.wasm ./

# Copy custom package.json for migrations with only external dependencies
COPY --chown=node:node packages/migrations/docker-package.json ./migrations/package.json

# Copy js-playground directory and installation script
COPY --chown=node:node packages/linter/js-playground ./js-playground/

ENV JS_PLAYGROUND_PATH=/app/js-playground

# Install migration dependencies
WORKDIR /app/migrations
RUN npm install && npm cache clean --force

# Return to app directory
WORKDIR /app

# Expose port
EXPOSE 3000

# Run migrations first, then start the app
ENTRYPOINT ["sh", "-c", "cd migrations && node packages/migrations/src/runMigrationsDocker.js && cd .. && node main.js"]
